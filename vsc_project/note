# 初始化 Azure Speech SDK
speech_config = speechsdk.SpeechConfig(
    subscription=os.getenv("AzureSpeech_SPEECH_KEY"),  
    region=os.getenv("AzureSpeech_SPEECH_REGION")
)
audio_config = speechsdk.audio.AudioOutputConfig(use_default_speaker=True)
UPLOAD_FOLDER = 'static'

# 初始化 Azure 翻譯和視覺服務的客戶端
text_translator = TextTranslationClient(
    credential=AzureKeyCredential(os.getenv("AzureTranslator_Key")),
    endpoint=os.getenv("AzureTranslator_EndPoint"),
    region=os.getenv("AzureTranslator_Region")  # Azure 翻譯服務的區域
)
vision_client = ComputerVisionClient(
    endpoint=os.getenv("AzureComputerVision_EndPoint"),
    credentials=CognitiveServicesCredentials(os.getenv("AzureComputerVision_Key"))
)

# 初始化 Flask 應用
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# 初始化 LINE Bot API
channel_access_token = os.getenv("Line_CHANNEL_ACCESS_TOKEN")
channel_secret = os.getenv("Line_CHANNEL_SECRET")
if channel_secret is None:
    print('Specify LINE_CHANNEL_SECRET as environment variable.')
    sys.exit(1)
if channel_access_token is None:
    print('Specify LINE_CHANNEL_ACCESS_TOKEN as environment variable.')

handler = WebhookHandler(channel_secret)
configuration = Configuration(
    access_token=channel_access_token
)




import subprocess
import os

def convert_wav_to_mp3(input_path, output_path):
    ffmpeg_path = os.path.join(os.getcwd(), "bin", "ffmpeg")  # 假設 ffmpeg 在 bin 資料夾
    try:
        subprocess.run([ffmpeg_path, "-i", input_path, output_path], check=True)
        print(f"已將音檔轉換為 MP3 格式並儲存到 {output_path}")
    except subprocess.CalledProcessError as e:
        print(f"轉換失敗：{e}")
        raise










config = os.getenv("Deploy")



    ffmpeg_path = os.path.join(os.getcwd(), "bin", "ffmpeg")
    try:
        subprocess.run([ffmpeg_path, "-i", input_path, output_path], check=True)
        print(f"已將音檔轉換為 MP3 格式並儲存到 {output_path}")
    except subprocess.CalledProcessError as e:
        error_messa = f"轉換 WAV 為 MP3 失敗：{e}"
        response = log_and_return_error(error_messa)
        print(response)
        raise

from configparser import ConfigParser
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage
from flask import Flask, request, abort
from linebot.v3 import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.webhooks import MessageEvent, TextMessageContent
from linebot.v3.messaging import Configuration, ApiClient, MessagingApi, ReplyMessageRequest, TextMessage

# 設定 ConfigParser
config = ConfigParser()
config.read("config.ini")

# 設定 Google Gemini
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash-latest", 
    google_api_key=config["Gemini"]["API_KEY"],
    convert_system_message_to_human=True,
)

# 初始化 Flask 應用程式
app = Flask(__name__)

# 設定 LINE Bot
configuration = Configuration(access_token=config["line-bot"]["channel_access_token"])
api_client = ApiClient(configuration=configuration)
messaging_api = MessagingApi(api_client)
handler = WebhookHandler(config["line-bot"]["channel_secret"])

@app.route("/callback", methods=['POST'])
def callback():
    # 確認請求的有效性
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    question = "describe " + event.message.text + " within 50 words"

    # 使用 Google Gemini
    messages = [HumanMessage(content=question)]
    result = llm.invoke(messages)
    answer = result.content

    # 回覆分析結果
    with ApiClient(configuration) as api_client:
        line_bot_api = MessagingApi(api_client)
        line_bot_api.reply_message_with_http_info(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=f"Q: {question}\nA: {answer}")]
            )
        )

if __name__ == "__main__":
    app.run(debug=True)



[AzureTranslator]
Key = 959b460d91e8436fb6084a25a8fca17c
EndPoint = https://api.cognitive.microsofttranslator.com/
Region = eastus
[AzureComputerVision]
EndPoint = https://sssss113602521.cognitiveservices.azure.com/
Key = 7afe21c7d362495bbee4bdca079dff77
[Line]
CHANNEL_ACCESS_TOKEN = Q0MxXpYjNLIl5yhhTr24RbvWqlG+0/MVRyUyC/T+UqSN5aQvz6eq4L9Lgbj/7mGlCaIOzU6lgyEZJXInlMTvc8ReT+lWzox3GALFw0ncpiF3k0ij+GV5ug6PsA2zYDqHNT4zKlv4yyd45SXRr3lqZQdB04t89/1O/w1cDnyilFU=
CHANNEL_SECRET = cb6a8b2bed84eefb30910d35dcef23f9
[AzureSpeech]
SPEECH_KEY = 7AblXWWKu4uOSe9QipYsAfR9GPWwVCRy0hAqweYdoSVINuDOsKYTJQQJ99AKACYeBjFXJ3w3AAAYACOGFsRm
SPEECH_REGION = eastus
[Deploy]
URL = https://458f-140-115-205-101.ngrok-free.app
[Gemini]
API_KEY = AIzaSyD1GKvRw-kKwbgEYkDoT7YkeC69zVNEnOM